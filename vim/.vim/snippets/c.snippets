# main()
snippet main
	int main(${1:int argc, char *argv[]})
	{
		${2:/* code */}
		return 0;
	}${3}
# #include <...>
snippet #inc
	#include <${1:stdio}.h>${2}
# #include "..."
snippet #Inc
	#include "${1:`Filename("$1.h")`}"${2}
# #define
snippet #def
	#define 
# #ifdef ... #define ... #endif
snippet #ifdef
	#ifdef ${1}
		#define ${2}
	#endif${3}
# #ifdef ... #define ... #else ... #endif
snippet #ifdefel
	#ifdef ${1}
		#define ${2}
	#else
		#define ${3}
	#endif${4}
# #ifndef ... #define ... #endif
snippet #ifndef
	#ifndef ${1}
		#define ${2}
	#endif${3}
# #ifndef ... #define ... #else ... #endif
snippet #ifndefel
	#ifndef ${1}
		#define ${2}
	#else
		#define ${3}
	#endif${4}
# #if ... #endif
snippet #if
	#if ${1}
	    ${2}
	#endif${3}
# #if ... #else ... #endif
snippet #ifel
	#if ${1}
		${2}
	#else
		${3}
	#endif${4}
# Header Include-Guard
# (the randomizer code is taken directly from TextMate; it could probably be
# cleaner, I don't know how to do it in vim script)
snippet once
	#ifndef ${1:`toupper(Filename('', 'UNTITLED').'_'.system("/usr/bin/ruby -e 'print (rand * 2821109907455).round.to_s(36)'"))`}

	#define $1

	${2}

	#endif /* end of include guard: $1 */
# If Condition
snippet if
	if (${1:/* condition */})
	{
		${2:/* code */}
	}${3}
snippet ifel
	if (${1:/* condition */})
	{
		${2:/* code */}
	}
	else
	{
		${3:/* code */}
	}${4}
snippet el
	else
	{
		${1:/* code */}
	}${2}
snippet eli
	elseif (${1:/* condition */})
	{
		${2:/* code */}
	}${3}
# Tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# Do While Loop
snippet do
	do
	{
		${1:/* code */}
	} while (${2:/* condition */});${3}
# While Loop
snippet wh
	while (${1:/* condition */})
	{
		${2:/* code */}
	}${3}
# For Loop
snippet for
	for (${1:i} = ${2:0}; ${3:$1} ${4:<} ${5:10}; ${6:$1++})
	{
		${7:/* code */}
	}${8}
# Function
snippet fun
	${1:void} ${2:function_name}(${3})
	{
		${4:/* code */}
	}
# Function Declaration
snippet fund
	${1:void} ${2:function_name}(${3});${4}
# Typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};${3}
# Struct
snippet st
	struct ${1:`Filename('$1_t', 'name')`}
	{
		${2:/* data */}
	}${3};${4}
# Typedef struct
snippet tds
	typedef struct
	{
		${1:/* data */}
	} ${2:MyCustomType};${3}
# union
snippet un
	union ${1:`Filename('$1_t', 'name')`}
	{
		${2:/* data */}
	}${3};${4}
snippet tdu
	typedef union
	{
		${1:/* data */}
	} ${2:MyCustomType};${3}
# enum
snippet en
	enum ${1:`Filename('$1_t', 'name')`}
	{
		${2:/* data */}
	}${3};${4}
# Typdef enum
snippet tde
	typedef enum
	{
		${1:/* data */}
	} ${2:MyCustomType};${3}
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet pr
	printf("${1:%s}\n"${2});${3}
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
snippet sc
	scanf("${1:%s}", ${2});${3}
snippet .
	[${1}]${2}
snippet uns
	unsigned 
# 文件开头注释
snippet wj/**
	/**
	 *版权：    ${1:版权}
	 *文件名：  ${2:文件名}
	 *功能：    ${3:功能}
	 *作者：    ${4:作者}
	 *版本：    ${5:版本}
	 *完成日期：${6:完成日期}
	 *修改记录：${7:修改记录}
	 */
# 函数注释
snippet hs/**
	/**
	 *函数名：      ${1:函数名}
	 *功能：        ${2:功能}
	 *被调函数：    ${3:被调函数}
	 *被访问的表：  ${4:被访问的表}
	 *被修改的表：  ${5:被修改的表}
	 *输入参数说明：${6:输入参数说明}
	 *输出参数说明：${7:输出参数说明}
	 *返回值说明：  ${8:返回值说明}
	 *其它：        ${9:其它}
	 */